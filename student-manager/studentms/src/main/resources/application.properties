# =====================================================
#  APPLICATION CONFIGURATION
# =====================================================

# Application name registered in Eureka
spring.application.name=studentms

# Port on which this microservice runs
server.port=8082


# =====================================================
#  DATABASE CONFIGURATION (H2 Database)
# =====================================================

# H2 Database file storage location (creates ./data/schooldb)
spring.datasource.url=jdbc:h2:file:./data/schooldb

# Database credentials (default for H2)
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

# Hibernate dialect for H2
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Automatically update/create tables based on Entity classes
spring.jpa.hibernate.ddl-auto=update

# Enable SQL logs in console (optional for debugging)
spring.jpa.show-sql=true


# =====================================================
#  H2 CONSOLE CONFIGURATION (Developer Utility)
# =====================================================

# Enable the H2 web console for testing (accessible via /h2-console)
spring.h2.console.enabled=true

# Path to access H2 console
spring.h2.console.path=/h2db


# =====================================================
#  EUREKA CLIENT CONFIGURATION
# =====================================================

# URL of the Eureka Server where this service will register
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

# Unique instance ID (helps when running multiple instances)
eureka.instance.instance-id=${spring.application.name}:${server.port}

# Enable registration with Eureka Server
eureka.client.register-with-eureka=true

# Enable fetching registry info (to discover other microservices)
eureka.client.fetch-registry=true

# Prefer using IP address instead of hostname for registration
eureka.instance.prefer-ip-address=true


# =====================================================
#  LOGGING CONFIGURATION
# =====================================================

# Global logging level for all packages (default INFO)
logging.level.root=INFO

# (Optional) Enable debug logs for specific packages
# Example: logging.level.org.school.studentms=DEBUG

# Console output pattern for logs
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# =====================================================
#  FILE LOGGING CONFIGURATION (Optional)
# =====================================================

# To write logs to a specific file, uncomment and use any of below:

## logging.file.name=logs/studentms.log     # Custom log file
## logging.file.path=logs                   # Folder to store logs

# Maximum file size before rolling over to a new log file
# logging.logback.rollingpolicy.max-file-size=10MB

# Number of old log files to keep
# logging.logback.rollingpolicy.max-history=10
